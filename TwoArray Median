// Day -4
// Median of Two Sorted Arrays
// Method: Binary Search and Partitioning
//
// Problem:
// Given two sorted arrays nums1 and nums2 of size m and n respectively,
// return the median of the two sorted arrays. The overall run time complexity should be O(log(min(m,n))).
//
// Approach:
// - Always apply binary search on the shorter array to avoid index issues.
// - Use binary search to find a correct partition point in both arrays such that:
//     - All elements on the left of the partition are less than or equal to elements on the right.
//     - The combined left and right halves are equal in size (or off by one if total length is odd).
// - The median depends on the maximum of the left half and the minimum of the right half.
//   If total length is even → average of both,
//   If odd → maximum of left half.
//
// Time Complexity: O(log(min(m, n)))
// Space Complexity: O(1) — constant extra space

public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Always binary search on the smaller array
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int m = nums1.length;
        int n = nums2.length;

        int low = 0;
        int high = m;

        while (low <= high) {
            // Try a cut in nums1
            int cut1 = (low + high) / 2;
            // Cut in nums2 is based on cut1 so that left + right is balanced
            int cut2 = (m + n + 1) / 2 - cut1;

            // Left side max elements (or Integer.MIN_VALUE if no elements)
            int left1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1 - 1];
            int left2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2 - 1];

            // Right side min elements (or Integer.MAX_VALUE if no elements)
            int right1 = (cut1 == m) ? Integer.MAX_VALUE : nums1[cut1];
            int right2 = (cut2 == n) ? Integer.MAX_VALUE : nums2[cut2];

            // If valid partition
            if (left1 <= right2 && left2 <= right1) {
                // Even total length: return average of middle two
                if ((m + n) % 2 == 0) {
                    return (Math.max(left1, left2) + Math.min(right1, right2)) / 2.0;
                } else {
                    // Odd total length: return max of left half
                    return Math.max(left1, left2);
                }
            }
            // Move search window left
            else if (left1 > right2) {
                high = cut1 - 1;
            }
            // Move search window right
            else {
                low = cut1 + 1;
            }
        }

        // Edge case if inputs are invalid
        throw new IllegalArgumentException("Input arrays are not valid.");
    }
}
